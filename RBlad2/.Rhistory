plot(x,y)
lm(y~x)
summary(lm(y~x))
hist(p.adjust(pValues,method="holm"))
min(p.adjust(pValues,method="holm"))
set.seed(1010093)
pValues <- rep(NA, 1000)
for (i in 1:1000) {
x <- rnorm(20)
# First 500 beta=0, last 500 beta=2
if (i <= 500) {
y <- rnorm(20)
} else {
y <- rnorm(20, mean = 2 * x)
}
pValues[i] <- summary(lm(y ~ x))$coeff[2, 4]
}
hist(pValues)
hist(pValues,breaks=100)
sum(pValues < .05)
sum(pValues < 5)
trueStatus <- rep(c("zero", "not zero"), each = 500)
table(pValues < 0.05, trueStatus)
table(p.adjust(pValues, method = "bonferroni") < 0.05, trueStatus)
hist(p.adjust(pValues,method="bonferroni"))
hist(p.adjust(pValues,method="bonferroni"),breaks=100)
hist(p.adjust(pValues,method="BH"),breaks=100)
table(p.adjust(pValues, method = "BH") < 0.05, trueStatus)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
theta <- median(x)
jk <- sapply(1:n, function(i) median(x[-i]))
thetaBar <- mean(jk)
biasEst <- (n - 1) * (thetaBar - theta)
seEst <- sqrt((n - 1) * mean((jk - thetaBar)^2))
plot(x)
head(x)
head(father.son)
plot(father.son$fheight)
plot(father.son)
plot(sort(x))
median(x)
mean(x)
biasEst
theta
thetaBar
seEst
library(bootstrap)
install.packages("bootstrap")
library(bootstrap)
?jackknife
jackknife(x,median)
tmp=jackknife(x,median)
names(tmp)
tmp$jack.bias
mode(x)
?mode
?skew
?sKey
data(InsectSprays)
boxplot(count ~ spray, data = InsectSprays)
dim(InsectSprays)
ISA=InsectSprays[InsectSprays$spray=="A",]
dim(ISA)
mean(ISA)
dim(ISA$spray)
ISA
dim(ISA$count)
mean(ISA$count)
sd(ISA$count)
min(ISA)
min(ISA$count)
max(ISA$count)
ISC=InsectSprays[InsectSprays$spray=="C",]
mean(ISC$count)
sd(ISC$count)
min(ISC$count)
max(ISC$count)
?boxplot
?boxplot
install.packages("kernlab")
library(help=kernlab)
?glm
install.packages("knitr")
library(knitr)
library(markdown)
library(slidify)
install.packages("slidify")
library(datasets)
library(xtable)
install.packages("xtable")
quit()
?knit2pdf
?knit2html
library(knitr)
?knit2pdf
?browseURL
?browsePDF
?opts_chunk
opts_chunk
opts_chunk$get()
opts_chunk$results
opts_chunk$resu
names(opts_chunk)
sessionInfo()
library(caret)
install.packages("caret")
library(caret)
install.packages("lme4")
install.packages("caret")
library(help=caret)
library(caret)
?preProcess
?createResample
y=1:20
createResample(y)
args(train.default)
?train
names(getModeInfo())
names(getModelInfo())
head(getModelInfo())
names(getModelInfo())
getModelInfo$xyf
getModelInfo()$xyf
attributes(getModelInfo()$xyf)
attributes(getModelInfo()$rf)
getModelInfo()$rf$label
getModelInfo()$rf$library
getModelInfo()$rf$loop
getModelInfo()$rf$type
getModelInfo()$rf$parameters
?trainControl
args(train.default)
args(trainControl)
args(trainControl$method)
args(trainControl()$method)
?args
?formals
plot(1:10,1:10,col="asdfasdf")
?options
?trainControl
?qqnorm
x=runif(100)
y=runif(100)
qqnorm(x,y)
?qqnorm
qqnorm(x)
qqnorm(rep(1,100))
qqnorm(rep(4,100))
qqnorm(x)
qqnorm(rnorm(100))
qqnorm(rnorm(1000))
qqnorm(runif(1000))
qqnorm(rexp(1000))
qqnorm(log(rexp(1000)))
qqnorm(rt(1000))
qqnorm(rt(1000,2))
qqnorm(rt(1000,20))
qqnorm(rt(50,2))
qqnorm(rt(50,20))
qqnorm(rt(50,40))
qqnorm(rt(1000,40))
qqnorm(rt(1000,3))
xyline(m=1)
abline(m=1)
abline(a=1)
abline(a=1,b=0)
abline(a=0,b=1)
qqnorm(rt(1000,3))
abline(a=0,b=1)
qqnorm(rt(1000,15))
abline(a=0,b=1)
qqnorm(rt(1000,45))
abline(a=0,b=1)
qqnorm(rt(1000,100))
abline(a=0,b=1)
y=runif(100)
preProcess(y,method="Box-Cox")
preProcess(y,method=c("Box-Cox"))
?preProcess
preProcess(data.frame(1:100,y),method="Box-Cox")
preProcess(data.frame(1:100,y),method="BoxCox")
install.packages("e1071")
preProcess(data.frame(1:100,y),method="BoxCox")
preProcess(y,method=c("Box-Cox"))
preProcess(y,method=c("BoxCox"))
preProcess(data.frame(1:100,y),method="BoxCox")
cocks-preProcess(data.frame(1:100,y),method="BoxCox")
cocks=preProcess(data.frame(1:100,y),method="BoxCox")
names(cocks)
cocks$data
cocks$median
cocks$dim
cocks$bc
qqnorm(y)
qqnorm(y^.7-1)
hist(y)
hist(y,breaks=100)
y=runif(10000)
hist(y,breaks=100)
hist(y^.7-1)
y=rexp(10000)
hist(y,breaks=100)
cocks=preProcess(data.frame(1:10000,y),method="BoxCox")
cocks
hist(y^.6-1)
hist(y^.6-1,breaks=100)
qqnorm(y)
hist(y^.3-1,breaks=100)
qqnorm(y)
qqnorm(y^.3-1)
hist((y+.7)^.3-1,breaks=100)
hist((y+.3)^.7-1,breaks=100)
x=1:10000
hist(x)
qqnorm(x^.7-1)
hist(x^.7-1)
hist(x^.7-1,breaks=100)
library(splines)
?bs
?prcomp
matrix(runif(100),10,100)
matrix(runif(100),10,10)
A=matrix(runif(100),10,10)
prcomp(A)
prcomp(A)$x
names(prcomp(A))
prcomp(A)$x
eig(prcomp(A)$x)
eigen(prcomp(A)$x)
names(prcomp(A))
prcomp(A)$sdev
plot(prcomp(A)$sdev)
quit()
?influence.measures
x=1:100
y=4+7*x+runif(100)
lm(y~x)
plot(x,y)
plot(y-4-7*x)
y=4+7*x+runif(100)*5
plot(x,y)
y=4+7*x+runif(100)*20
plot(x,y)
y=4+7*x+runif(100)*50
plot(x,y)
y=4+7*x+runif(100)*100
plot(x,y)
lm(7~x)
lm(y~x)
summary(lm(y~x))
mod=lm(y~x)
abline(mod)
abline(a=54,b=7)
rstandard(mod)
plot(mod)
plot(mod)
plot(rstandard(mod))
plot(rstudent(mod))
points(rstandard(mod),col="green")
plot(rstudent(mod)-rstandard(mod))
rstandard(mod)*residuals(mod)
residuals(mod)/rstandard(mod)
hist(residuals(mod)/rstandard(mod))
hist(residuals(mod)/rstandard(mod),breaks=100)
hist(residuals(mod)/rstandard(mod),breaks=50)
hatvalues(mod)
hist(hatvalues(mod))
plot(x,hatvalues(mod))
plot(x,dffits(mod))
plot(x,dfbeta(mod))
plot(x,dfbetas(mod))
dfbeta(mod)
dfbetas(mod)
head(dfbetas(mod))
cooks.distance(mod)
hist(cooks.distance(mod))
plot(x,cooks.distance(mod))
sd(rstandard(mode))
sd(rstandard(mod))
sd(mod)
mod$sigma
?rstandard
plot(x,rstandard(mod))
plot(x,resid(mod)/rstandard(mod))
plot(x,resid(mod)/rstandard(mod),ylim=c(0,30))
plot(x,resid(mod)/rstandard(mod))
mod$sigma
mod$coefficients
summary(mod)$coefficients
names(summary(mod))
summary(mod)$sigma
?influence.measures
?hatvalues
?hatvalues.lm
?hat
x
y
cooks.distance(mod)
hist(cooks.distance(mod))
hist(cooks.distance(mod),breaks=20)
plot(x,cooks.distance(mod))
quit()
install.package("shiny")
install.packages("shiny")
library(shiny)
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data.frame(shit=4:9)
?code
?renderPrint
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x<-0
x
x<<-0
x
x=1
x=1
runApp()
runApp(display.mode='showcase')
runApp(display.mode='showcase')
?isolate
?actionButton
?require
library(rcharts)
library(rCharts)
install.packages("rCharts")
require(rCharts)
require(devtools)
install.packages("devtools")
quit()
library(shiny)
library(devtools)
install_github("rCharts",'ramnathv')
library(rCharts)
haireye=as.data.frame(HairEyeColor)
?nPlot
?rPlot
n1<-rPlot(Freq~Eye,group="Eye",type="MultiBarChart",data=subset(haireye,Sex="Male"))
?cat
n1$save("fig/n1.html",cdn=True)
names(n1)
attributes(n1)
names(n1$.xData)
attributes(n1)
n1$class()
n1$class
n1$print()
?n1$print
iris
names(iris)=gsub("\\.","",names(iris))
rPlot(SepalLength~SepalWidth|Species,data=iris,color="Species",type="point")
rPlot(Freq~Eye,group="Eye",type="MultiBarChart",data=subset(haireye,Sex="Male"))
haireye
rPlot(Freq~Hair|Eye,color="Eye",type="bar",data=haireye)
rPlot(Freq~Eye,group="Eye",type="MultiBarChart",data=subset(haireye,Sex="Male"))
?rPlot
?yaml
n1$html()
browser(n1$html())
exit
quit
quit()
quit
n1$html()
?n1$html
rPlot(Freq~Hair|Eye,color="Eye",type="bar",data=haireye)
r1<-rPlot(Freq~Hair|Eye,color="Eye",type="bar",data=haireye)
r1$save('fig/r1.html',cdn=TRUE)
?mPlot
?xPlot
?Leaflet
?Leaflet$new
?Leaflet$new()
library(reshape2)
?Leaflet
?Leaflet$new
library("googleVis")
library(googleVis)
install.packages("googleVis")
library(googleVis)
demo(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
M
names(M)
M$html
print(M$html)
html(M$html)
library(html)
libary(HTML)
library(HTML)
library(htmltools)
gvisMotionChart(Fruits, "Fruit", "Year", options = list(width = 600, height = 400))
print(M, "chart")
?gvisMotionChart
plot(M1)
plot(M)
Fruits
?Fruits
?gvisTrreChart
?gvisTreeChart
?gvisTreeMap
Tree <- gvisTreeMap(Regions,  idvar="Region", parentvar="Parent",
sizevar="Val", colorvar="Fac")
plot(Tree)
?plot
Regions
?gvisGeoChart
G1a <- gvisGeoChart(Exports, locationvar='Country', colorvar='Profit')
plot(G1a)
?gvisTable
tbl1 <- gvisTable(Population)
plot(tbl1)
print(tbl1)
library(slidify)
install.packages("slidify")
quit()
library(slidify)
install_github("slidify","ramnathv")
library(devtools)
install_github("slidify","ramnathv")
install_github("slidifyLibraries","ramnathv")
library(slidify)
?author
?package.skeleton
?system
system("ls")
library(methods)
?Classes
methods("mean")
showMethods("mean")
methods("show")
methods("mean.default")
quit()
dir()
dir()
?browser
?open
file("measure.plot.tools.R")
?file
help.search("open")
file.edit("measure.plot.tools.R")
plot.mag.ratios()
source("measure.plot.tools.R")
plot.mag.ratios()
plot.nm.smooth()
head(training)
plot.ang.err()
source("measure.plot.tools.R")
plot.ang.err()
source("measure.plot.tools.R")
plot.ang.err()
source("measure.plot.tools.R")
source("measure.plot.tools.R")
plot.ang.err()
source("measure.plot.tools.R")
plot.ang.err()
source("measure.plot.tools.R")
plot.ang.err()
plot.fit.data.naive()
plot.fit.data.log()
file.edit("measure.n.R")
dir()
file.edit("par.est.R")
file.edit("measure.process.R")
mm.2lf
dim(training)
unique(training$meas)
quit()
p=1:100
y^(1/p)
p
plot(p,y)
length(y)
y
y=.01^(1/p)
plot(p,y)
y=.001^(1/p)
plot(p,y)
exit
quit()
x=0:400/100
x^2
x=0:400/10
x^2
x^2/1600
plot(x,x^2/1600)
y=x^2/1600
y[201]
y[101]
exit
quit()
x=-100:100/10
x
y=3+(5-3)/(1+x^2)
plot(x,y)
plot(x,exp(y))
plot(exp(x),exp(y))
exit
quit()
q()
exit
quit()
